import sys
import yfinance as yf
import pandas as pd
import numpy as np
import pyqtgraph as pg
from pyqtgraph import DateAxisItem, GraphicsLayoutWidget
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget, QPushButton, QTextEdit, QHBoxLayout
from PyQt5.QtCore import QTimer

# Forex pair symbol for Yahoo Finance (use a valid ticker)
SYMBOL = 'EURUSD=X'

class ZimTrade(QMainWindow):
    def __init__(self):
        super().__init__()
        
        self.setWindowTitle("ZimTrade")
        self.setGeometry(100, 100, 1000, 600)
        
        self.account_balance = 10000.00  # Starting balance
        self.account_equity = self.account_balance
        self.trade_volume = 1000  # Standard lot size for more realistic trades
        
        self.prices = pd.DataFrame(columns=['time', 'open', 'high', 'low', 'close'])
        
        self.initUI()
        
        # Initialize trading sticks with dummy data
        self.trading_sticks = self.create_dummy_trading_data()
        
        # Start automated trading
        self.start_automated_trading()
    
    def initUI(self):
        main_layout = QVBoxLayout()
        
        self.account_info_label = QLabel("Account Information", self)
        main_layout.addWidget(self.account_info_label)
        
        self.market_data_label = QLabel("Market Data", self)
        main_layout.addWidget(self.market_data_label)
        
        self.trade_log = QTextEdit(self)
        main_layout.addWidget(self.trade_log)
        
        self.order_button = QPushButton("Manual Order", self)
        self.order_button.clicked.connect(self.place_manual_order)
        main_layout.addWidget(self.order_button)
        
        # Create a horizontal layout to include graphs
        graph_layout = QHBoxLayout()
        
        # Candlestick chart for price history
        self.price_plot_widget = GraphicsLayoutWidget()
        self.price_plot = self.price_plot_widget.addPlot(axisItems={'bottom': DateAxisItem()})
        graph_layout.addWidget(self.price_plot_widget)
        
        # Add the graph layout to the main layout
        main_layout.addLayout(graph_layout)
        
        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)
    
    def show_account_info(self):
        account_info = f"Balance: ${self.account_balance:.2f} | Equity: ${self.account_equity:.2f}"
        self.account_info_label.setText(account_info)
    
    def start_automated_trading(self):
        # Initialize trading sticks
        self.update_graphs(self.trading_sticks)
        
        # Schedule the initial automated trading call
        QTimer.singleShot(5000, self.automated_trading)
    
    def automated_trading(self):
        # Fetch real market data
        rates = self.fetch_market_data()
        
        if rates is None:
            print("Failed to get rates")
            return
        
        # Update the candlestick chart
        self.update_graphs(rates)
        
        # Apply trading strategy
        self.apply_trading_strategy(rates)
        
        # Generate manual orders
        self.generate_manual_orders(rates)
        
        # Update account info display
        self.show_account_info()
        
        # Schedule the next automated trading call
        QTimer.singleShot(5000, self.automated_trading)
    
    def fetch_market_data(self):
        try:
            data = yf.download(tickers=SYMBOL, period='1d', interval='1m')
            
            if data.empty:
                print("Error fetching data")
                return None
            
            data['time'] = data.index
            data = data.rename(columns={
                'Open': 'open',
                'High': 'high',
                'Low': 'low',
                'Close': 'close'
            })
            data = data[['time', 'open', 'high', 'low', 'close']]
            data.set_index('time', inplace=True)
            self.prices = data.tail(10)
            return data.tail(10)
        
        except Exception as e:
            print("Exception fetching data:", e)
            return None
    
    def create_dummy_trading_data(self):
        # Create initial dummy data for trading sticks
        data = pd.DataFrame({
            'time': pd.date_range(start='1/1/2022', periods=30, freq='T'),
            'open': np.random.uniform(1.0, 1.1, 30),
            'high': np.random.uniform(1.1, 1.2, 30),
            'low': np.random.uniform(0.9, 1.0, 30),
            'close': np.random.uniform(1.0, 1.1, 30)
        })
        
        for i in range(1, len(data)):
            if np.random.rand() > 0.5:
                data.iloc[i, data.columns.get_loc('close')] = data.iloc[i, data.columns.get_loc('open')] + np.random.uniform(0.01, 0.02)
                data.iloc[i, data.columns.get_loc('high')] = max(data.iloc[i, data.columns.get_loc('open')], data.iloc[i, data.columns.get_loc('close')]) + np.random.uniform(0.01, 0.02)
                data.iloc[i, data.columns.get_loc('low')] = min(data.iloc[i, data.columns.get_loc('open')], data.iloc[i, data.columns.get_loc('close')]) - np.random.uniform(0.01, 0.02)
            else:
                data.iloc[i, data.columns.get_loc('close')] = data.iloc[i, data.columns.get_loc('open')] - np.random.uniform(0.01, 0.02)
                data.iloc[i, data.columns.get_loc('high')] = max(data.iloc[i, data.columns.get_loc('open')], data.iloc[i, data.columns.get_loc('close')]) + np.random.uniform(0.01, 0.02)
                data.iloc[i, data.columns.get_loc('low')] = min(data.iloc[i, data.columns.get_loc('open')], data.iloc[i, data.columns.get_loc('close')]) - np.random.uniform(0.01, 0.02)
        
        data.set_index('time', inplace=True)
        return data
    
    def apply_trading_strategy(self, rates):
        # Simple pattern recognition strategy
        patterns = self.identify_patterns(rates)
        for pattern in patterns:
            if pattern == "bullish":
                self.buy(rates['close'].iloc[-1])
            elif pattern == "bearish":
                self.sell(rates['close'].iloc[-1])
    
    def identify_patterns(self, rates):
        patterns = []
        open_prices = rates['open']
        close_prices = rates['close']
        high_prices = rates['high']
        low_prices = rates['low']
        
        # Example pattern recognition (simplified)
        if len(rates) >= 3:
            # Bullish Patterns
            if close_prices.iloc[-1] > open_prices.iloc[-1] and (high_prices.iloc[-1] - low_prices.iloc[-1]) > 2 * (open_prices.iloc[-1] - close_prices.iloc[-1]):
                patterns.append("hammer")
            elif close_prices.iloc[-1] > open_prices.iloc[-1] and close_prices.iloc[-2] < open_prices.iloc[-2] and close_prices.iloc[-1] > open_prices.iloc[-2]:
                patterns.append("bullish_engulfing")
            
            # Bearish Patterns
            if close_prices.iloc[-1] < open_prices.iloc[-1] and (high_prices.iloc[-1] - low_prices.iloc[-1]) > 2 * (close_prices.iloc[-1] - open_prices.iloc[-1]):
                patterns.append("shooting_star")
            elif close_prices.iloc[-1] < open_prices.iloc[-1] and close_prices.iloc[-2] > open_prices.iloc[-2] and close_prices.iloc[-1] < open_prices.iloc[-2]:
                patterns.append("bearish_engulfing")
        
        return patterns
    
    def generate_manual_orders(self, rates):
        current_price = rates['close'].iloc[-1]
        
        if np.random.rand() > 0.5:
            self.buy(current_price)
        else:
            self.sell(current_price)
    
    def buy(self, price):
        cost = self.trade_volume * price
        self.account_balance -= cost
        self.account_equity = self.account_balance  # Simplified equity calculation
        
        self.trade_log.append(f"BUY: Volume: {self.trade_volume} | Price: {price:.4f} | Cost: ${cost:.2f}")
        self.update_candlestick(self.trade_volume, price, 'buy')
    
    def sell(self, price):
        revenue = self.trade_volume * price
        self.account_balance += revenue
        self.account_equity = self.account_balance  # Simplified equity calculation
        
        self.trade_log.append(f"SELL: Volume: {self.trade_volume} | Price: {price:.4f} | Revenue: ${revenue:.2f}")
        self.update_candlestick(self.trade_volume, price, 'sell')
    
    def place_manual_order(self):
        # Manual order for demonstration (e.g., always a buy for simplicity)
        current_price = self.prices['close'].iloc[-1]
        self.buy(current_price)
        # Update account info display
        self.show_account_info()
    
    def update_graphs(self, rates):
        self.price_plot.clear()
        
        time = rates.index
        open_prices = rates['open']
        high_prices = rates['high']
        low_prices = rates['low']
        close_prices = rates['close']
        
        for i in range(len(rates)):
            color = 'g' if close_prices.iloc[i] > open_prices.iloc[i] else 'r'
            
            # Draw candlestick body
            self.price_plot.addItem(pg.PlotDataItem([time[i].timestamp(), time[i].timestamp()], [open_prices.iloc[i], close_prices.iloc[i]], pen=pg.mkPen(color, width=9)))
            # Draw high-low line
            self.price_plot.addItem(pg.PlotDataItem([time[i].timestamp(), time[i].timestamp()], [low_prices.iloc[i], high_prices.iloc[i]], pen=pg.mkPen(color, width=1)))
        
        # Draw line connecting close prices
        self.price_plot.plot([t.timestamp() for t in time], close_prices, pen=pg.mkPen('w', width=1))
    
    def update_candlestick(self, volume, price, action):
        # Add candlestick based on the action (buy/sell)
        if len(self.prices) > 0:
            last_index = self.prices.index[-1]
        else:
            last_index = pd.Timestamp('now')
        next_index = last_index + pd.Timedelta(minutes=1)
        
        if action == 'buy':
            new_candle = pd.DataFrame([{
                'time': next_index,
                'open': price - np.random.uniform(0.01, 0.02),
                'high': price + np.random.uniform(0.01, 0.02),
                'low': price - np.random.uniform(0.02, 0.03),
                'close': price
            }])
        elif action == 'sell':
            new_candle = pd.DataFrame([{
                'time': next_index,
                'open': price + np.random.uniform(0.01, 0.02),
                'high': price + np.random.uniform(0.02, 0.03),
                'low': price - np.random.uniform(0.01, 0.02),
                'close': price
            }])
        
        new_candle.set_index('time', inplace=True)
        self.prices = pd.concat([self.prices, new_candle])
        self.update_graphs(self.prices)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWindow = ZimTrade()
    mainWindow.show()
    sys.exit(app.exec_())
